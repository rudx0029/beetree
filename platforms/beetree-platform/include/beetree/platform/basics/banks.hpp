//------------------------------------------------------------------------------
// Copyright (C) 2021 The BeeTree Authors - All Rights Reserved
//
// This file is subject to the terms and conditions defined in the
// file 'LICENSE', which is part of this source code package.
//------------------------------------------------------------------------------
#pragma once
#include "beetree/platform/basics/array-ref.hpp"
#include "beetree/platform/basics/value.hpp"

namespace bte {
namespace registry {

/// A registry Bank is an array of data items (uint32_t value). The register bank is to
/// be a collection of related values where each value can be represented as a uint32_t.
///
///
/// @tparam KeysEnum    The register bank keys enumeration type generated by tools/make-registry
/// during
///                     the build's configuration. The Keys serve as an index to access the data
///                     items in the Bank.
template <class KeysEnum>
using Bank    = std::array<Value, static_cast<std::size_t>(KeysEnum::NUM_ITEMS)>;
using BankRef = array_ref<Value>;

/// A registry Provider is an array of register banks, where a register
/// bank is an array of data items. The application
//// TODO: Document how to instantiate the Provider and the Banks. The Banks must be assigned to
///the Provider
///
/// @tparam BanksEnum   The enumeration of registry Banks generated by tools/make-registry during
/// the build's
///                     configuration. The enumeration serves as an index to access each registry
///                     bank contained by the Provider.
///
template <class BanksEnum>
using Banks = std::array<BankRef, static_cast<std::size_t>(BanksEnum::NUM_BANKS)>;
using BanksRef = array_ref<BankRef>;




// struct Provider {
// private:
//     Bank<A> m_bank_a;
//     Bank<B> m_bank_b;
//     Bank<C> m_bank_c;
    
//     Banks<BanksEnum> m_banks = { array_ref(bank_a), array_ref(bank_b), array_ref(bank_c)};


// public:
//     const BankRef bank_a() const;
//     BankRef bank_a() const;

//     const BankRef bank_a() const;


//     BanksRef banks();
//     const BanksRef& banks();
// }

}  // namespace registry
}  // namespace bte